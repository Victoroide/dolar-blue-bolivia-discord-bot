name: Deploy to Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CONTAINER_NAME: dolarbluebolivia

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install SSH and commands dependencies
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Execute commands over SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}  
        username: ${{ secrets.EC2_USERNAME }} 
        key: ${{ secrets.SSH_PRIVATE_KEY }} 
        script: |
          # Navegar a la carpeta del proyecto
          cd dolar-blue-bolivia-discord-bot

          # Obtener la última versión del código desde la rama 'main'
          git fetch origin main
          git reset --hard origin/main
          
          # Asegurarse de que el archivo .env tiene los permisos adecuados
          sudo chmod +w .
          sudo touch .env
          sudo chmod +w .env

          # Crear el archivo .env con las variables de entorno necesarias
          sudo bash -c '{
            echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}"
            echo "PUBLIC_FIREBASE_API_KEY=${{ secrets.PUBLIC_FIREBASE_API_KEY }}"
            echo "PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.PUBLIC_FIREBASE_AUTH_DOMAIN }}"
            echo "PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.PUBLIC_FIREBASE_PROJECT_ID }}"
            echo "PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.PUBLIC_FIREBASE_STORAGE_BUCKET }}"
            echo "PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}"
            echo "PUBLIC_FIREBASE_APP_ID=${{ secrets.PUBLIC_FIREBASE_APP_ID }}"
            echo "PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.PUBLIC_FIREBASE_MEASUREMENT_ID }}"
          } > .env'

          # Apagar y eliminar los contenedores actuales
          sudo docker-compose -f docker-compose.yml down -v

          # Construir y levantar los nuevos contenedores
          sudo docker-compose -f docker-compose.yml up -d --build

          # Limpiar imágenes y contenedores no usados para liberar espacio adicional
          sudo docker system prune -af --volumes
